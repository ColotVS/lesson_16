public class lesson_16_28 {
    //Класс PrintStream

    //Классы потокового вывода тоже можно организовывать в цепочки с использованием потоков-посредников,
    //которые записывают данные в переданный им целевой поток.

    //Самый интересный и многофункциональный из всех промежуточных потоков вывода — PrintStream.
    //У него несколько десятков методов и аж целых 12 конструкторов.
    //Класс PrintStream унаследован от класса FilterOutputStream, а тот унаследован от OutputStream.
    //Поэтому класс PrintStream имеет все методы классов-родителей и плюс свои. Вот самые интересные из них:
    //Методы	                                    Описание
    //void print(obj)                               Преобразует переданный объект в строку и выводит в целевой поток.
    //void println(obj)                             Преобразует переданный объект в строку и выводит в целевой поток.
    //                                              Добавляет в конце символ переноса строки
    //void println()                                Выводит в целевой поток символ переноса строки
    //PrintStream format(String format, args...)    Конструирует и выводит строку на основе строки шаблона и переданных аргументов,
    //                                              по аналогии с методом String.format()

    //Все дело в том, что у него много вариантов метода print() и println() с разными аргументами. Их вполне можно свести к этой таблице.
    //Мы даже не будем разбирать эти методы, т.к. вы их и так уже хорошо знаете.

    //Помните команду System.out.println()? А ведь ее можно записать в две строки:
    /*
    PrintStream stream = System.out;
    stream.println("Hello!");
     */

    //Наша любимая команда System.out.println() — это вызов метода println()
    //у статической переменной out класса System. А тип у этой переменной — PrintStream.

    //Есть в Java один интересный класс — ByteArrayOutputStream, который представляет из себя динамически увеличивающийся массив байт,
    //унаследованный от OutputStream.
    //Объект ByteArrayOutputStream и объект PrintStream можно выстроить в такую цепочку:

    /*
    ByteArrayOutputStream baos = new ByteArrayOutputStream();   //Создали в памяти буфер для записи
    try(PrintStream stream = new PrintStream(baos))             //Обернули буфер в объект PrintStream
    {
        stream.println("Hello");                                //Записывает данные как в консоль
        stream.println(123);
    }
    String result = baos.toString();                            //Преобразовываем массив в строку!
    System.out.println(result);                                 //Вывод на экран:
                                                                Hello!
                                                                123
    */
}
