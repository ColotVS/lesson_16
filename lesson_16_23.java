public class lesson_16_23 {
    //Класс OutputStream

    //С потоками ввода мы только что разобрались.
    //Настало время поговорить о потоках вывода.
    //Класс OutputStream является классом-родителем для всех классов, которые поддерживают байтовый вывод.
    //Это абстрактный класс, который сам ничего не делает: для этого у него есть классы-наследники на все случаи жизни.
    //Если попроще, этот класс оперирует байтами, а не, например, символами или другими типами данных.
    //А то, что он абстрактный, значит, что мы обычно используем не его, а один из его классов-наследников.
    //Например, FileOutputStream и ему подобные.
    //Но вернемся к классу OutputStream. У этого класса есть методы, которые обязаны реализовывать все его классы-наследники.
    //Вот основные из них:
    //Методы	                            Описание
    //void write(int b)                     Записывает один байт (не int) в поток.
    //void write(byte[] buffer)             Записывает массив байт в поток
    //void write(byte[] buffer, off, len)   Записывает часть массива байт в поток
    //void flush()                          Записывает в поток все данные, которые хранятся в буфере
    //void close()                          Закрывает поток

    //При создании объекта класса-наследника InputStream обычно указывается объект-источник, из которого InputStream читает данные.
    //При создании объекта класса-наследника OutputStream также обычно указывается целевой объект или целевой поток,
    //в который будут записываться данные.
    //Вкратце пройдемся по всем методам класса OutputStream:

    //Метод write(int b)
    //Этот метод записывает в поток вывода один байт (не int). Переданное значение приводится к типу байт, три первые байта отбрасываются.

    //Метод write(byte[] buffer)
    //Записывает в поток вывода переданный массив байтов. Все.

    //Метод write(byte[] buffer, int offset, int length)
    //Записывает в поток вывода часть переданного массива байтов.
    //Переменная offset задает номер первого элемента массива, length — длина записываемого фрагмента.

    //Метод flush()
    //Метод flush() используется, чтобы принудительно записать в целевой поток данные, которые могут кэшироваться в текущем потоке.
    //Актуально при использовании буферизации и/или нескольких объектах потоков, организованных в цепочку.

    //Метод close()
    //Закрывает поток и освобождает все системные ресурсы, связанные с этим потоком.
    //Метод close() можно не вызывать, если вы используете try-with-resources.

    //Пример — копирование файла
    /*
    String src = "c:\\projects\\log.txt";
    String dest = "c:\\projects\\copy.txt";

    try(FileInputStream input = new FileInputStream(src);   //InputStream для чтения из файла
    FileOutputStream output = new FileOutputStream(dest))   //OutputStream для записи в файл
    {
        byte[] buffer = new byte[65536]; // 64Kb            //Буфер, в который мы будем считывать данные
        while (input.available() > 0)                       //Пока данные есть в потоке
        {
            int real = input.read(buffer);                  //Считываем данные в буфер
            output.write(buffer, 0, real);                  //Записываем данные из буфера во второй поток
        }
    }
    */
}
