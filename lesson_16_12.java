public class lesson_16_12 {
    //Класс InputStream

    //Класс InputStream интересен тем, что является классом-родителем для сотен классов-наследников.
    //В нем самом нет никаких данных, однако у него есть методы, которые есть у всех его классов-наследников.
    //Объекты-потоки вообще редко хранят в себе данные. Поток — это инструмент чтения/записи данных, но не хранения.

    //Методы класса InputStream и всех его классов-наследников:
    //Методы	                    Описание
    //int read()                    Читает один байт из потока
    //int read(byte[] buffer)       Читает массив байт из потока
    //byte[] readAllBytes()         Читает все байты из потока
    //long skip(long n)             Пропускает n байт в потоке (читает и выкидывает)
    //int available()               Проверяет, сколько байт еще осталось в потоке
    //void close()                  Закрывает поток

    //Метод read()
    //Метод read() читает один байт из потока и возвращает его. Вас может сбить тип результата — int, однако так было сделано,
    //потому что тип int — это стандарт всех целых чисел. Три первые байта типа int будут равны нулю.

    //Метод read(byte[] buffer)
    //Это вторая модификация метода read(). Он позволяет считать из InputStream сразу массив байт.
    //Массив для сохранения байт нужно передать в качестве параметра. Метод возвращает число — количество реально прочитанных байт.

    //Метод readAllBytes()
    //Просто считывает все данные из InputStream, пока они не закончатся, и возвращает их в виде единого массива байт.
    //Очень удобен для чтения небольших файлов.
    //Большие файлы могут физически не поместиться в память, и метод кинет исключение.

    //Метод skip(long n)
    //Этот метод позволяет пропустить n первых байт из объекта InputStream.
    //Поскольку данные читаются строго последовательно, этот метод просто вычитывает n первых байт из потока и выбрасывает их.
    //Возвращает число байт, которые были реально пропущены (если поток закончился раньше, чем прокрутили n байт).

    //Метод int available()
    //Метод возвращает количество байт, которое еще осталось в потоке

    //Метод void close()
    //Метод close() закрывает поток данных и освобождает связанные с ним внешние ресурсы.
    //После закрытия потока, данные из него читать больше нельзя.

    //Давайте напишем пример программы, которая копирует очень большой файл.
    //Его нельзя весь считать в память с помощью метода readAllBytes(). Пример:
    /*
    String src = "c:\\projects\\log.txt";
    String dest = "c:\\projects\\copy.txt";

    try(FileInputStream input = new FileInputStream(src);       InputStream для чтения из файла
    FileOutputStream output = new FileOutputStream(dest))       OutputStream для записи в файл
    {
        byte[] buffer = new byte[65536]; // 64Kb                Буфер, в который будем считывать данные
        while (input.available() > 0)                           Пока данные есть в потоке
        {
            int real = input.read(buffer);                      Считываем данные в буфер
            output.write(buffer, 0, real);                      Записываем данные из буфера во второй поток
        }
    }
    */

    //В этом примере мы использовали два класса: FileInputStream — наследник InputStream для чтения данных из файла,
    //и класс FileOutputStream — наследник OutputStream для записи данных в файл.
    //Еще один интересный момент — это переменная real.
    //Когда из файла будет читаться последний блок данных, легко может оказаться, что его длина меньше 64Кб.
    //Поэтому в output нужно тоже записать не весь буфер, а только его часть: первые real байт.
    //Именно это и делается в методе write().
}
